function [smoothed_pre_clip_mat,smoothed_post_clip_mat]=foo(pinterp,targeted_seq,load_temp)
if nargin==2;load_temp=0;end

% initialize arrays and vectiors
catch_clips={};stim_clips={};   % clips are sound waveforms of catch and stimmed trials - used for making avg spectrograms
z=0;
p=0;
catch_clips_smoothed=[];stim_clips_smoothed=[];
pitch_stimmed_syl=[];pitch_catch_syl=[]; % vectors of pitches (taken from peak_pinterp_labelvec, a field generated by headphones_analyze_pitch.m)
pcatch_clips={}; pstim_clips={}; % clips of just syllable for continuous pitch quantification
amp_catch_syl=[];amp_stimmed_syl=[]; % vectors of amplitues (taken from "   "   ")
amp_rms_catch_syl=[];amp_rms_stimmed_syl=[]; % vectors of amplitues (taken from "   "   ")
se_stimmed_syl=[];se_catch_syl=[]; %vectors of spectral entropies
P1_allfreqs_stim=[];P1_allfreqs_catch=[]; %matrices for power spectra
P1_stim=[];P1_catch=[];
F1_allfreqs_stim=[];F1_allfreqs_catch=[];
F1_stim=[];F1_catch=[];
delay_from_trigger_to_onset_of_stim_syl=[]; % delay (in milliseconds) from the trigger to the start of the quantified syllable
delay_from_stim_to_onset_of_stim_syl=[]; % delay (in milliseconds) from the start of the stimulus pulse to the start of the quantified syllable
fn_stim={};t_stim=[];
fn_catch={};
pref=5326.3;



n_syls_from_trigger_to_stim_or_catch=0; % MEANS THAT THE SYLLABLE AFTER THE TRIGGER SYL IS QUANTIFIED, EVEN IF THE STIMULUS LATENCY PUTS STIM AFTER THIS SYL


% Use numeric inputs to load previously-compted data arrays
%
% Before running the analysis, you have to run headphones_quantify_pitch

if load_temp==1
    loadname=['TEMP_OUTPUT_SE_256_PC_' targeted_seq];
    load(loadname);
elseif load_temp==2
    load_arr{1}='TEMP_OUTPUT_250uA_hifreq_35ms_latency.mat';
    load_arr{end+1}='TEMP_OUTPUT_250uA_hifreq_35ms_latency2.mat';
    [catch_clips,stim_clips,pitch_stimmed_syl,pitch_catch_syl,amp_catch_syl,amp_stimmed_syl,delay_from_stim_to_onset_of_stim_syl,targeted_seq,skip_first_and_last,t_stim,fn_stim]=combine_datasets(load_arr);
    pq_offset=6;
elseif load_temp==3
    % need to rerun these
    load_arr{1}='TEMP_OUTPUT_375uA_zero_latency.mat';
    load_arr{end+1}='TEMP_OUTPUT_375uA_zero_latency2.mat';
    load_arr{end+1}='TEMP_OUTPUT_375uA_zero_latency3.mat';
%     load_arr{end+1}='TEMP_OUTPUT_375uA_5ms_latency.mat';
%     load_arr{end+1}='TEMP_OUTPUT_375uA_15ms_latency.mat';
%     load_arr{end+1}='TEMP_OUTPUT_375uA_40ms_latency.mat';
    [catch_clips,stim_clips,pitch_stimmed_syl,pitch_catch_syl,amp_catch_syl,amp_stimmed_syl,delay_from_stim_to_onset_of_stim_syl,targeted_seq,skip_first_and_last,t_stim,fn_stim]=combine_datasets(load_arr);
    pq_offset=6;
elseif load_temp==4
    % need to rerun these
    load_arr{1}='TEMP_OUTPUT_375uA_20ms_latency_stack_5pulse_early_pq.mat';
    load_arr{end+1}='TEMP_OUTPUT_375uA_40ms_latency_stack_5pulse_early_pq.mat';
    [catch_clips,stim_clips,pitch_stimmed_syl,pitch_catch_syl,amp_catch_syl,amp_stimmed_syl,delay_from_stim_to_onset_of_stim_syl,targeted_seq,skip_first_and_last,t_stim,fn_stim]=combine_datasets(load_arr);
    pq_offset=11;
elseif load_temp==5
    % need to rerun these
    load_arr{1}='TEMP_OUTPUT_375uA_20ms_latency_stack_5pulse_late_pq.mat';
    load_arr{end+1}='TEMP_OUTPUT_375uA_40ms_latency_stack_5pulse_late_pq.mat';
    [catch_clips,stim_clips,pitch_stimmed_syl,pitch_catch_syl,amp_catch_syl,amp_stimmed_syl,delay_from_stim_to_onset_of_stim_syl,targeted_seq,skip_first_and_last,t_stim,fn_stim]=combine_datasets(load_arr);
    pq_offset=25;
elseif load_temp==6
        load TEMP_OUTPUT_375uA_15ms_latency_stack_late_pq
        pq_offset=25;
elseif load_temp==7
        load TEMP_OUTPUT_375uA_15ms_latency_stack_70ms_train_late_pq
        pq_offset=25;
elseif load_temp==8
        load TEMP_OUTPUT_175uA_15ms_latency_stack_70ms_train_late_pq
        pq_offset=25;
elseif load_temp==9
        load TEMP_OUTPUT_375uA_15ms_latency_stack_early_pq
        pq_offset=11;
elseif load_temp==10
        load TEMP_OUTPUT_375uA_15ms_latency_stack_70ms_train_early_pq
        pq_offset=11;
elseif load_temp==11
        load TEMP_OUTPUT_175uA_15ms_latency_stack_70ms_train_early_pq
        pq_offset=11;

else

    if isunix
        !ls **.not.mat > batchfile
        %!ls *1701.19*.not.mat > batchfile
    else
        !dir /B **.not.mat > batchfile
    end

%         targeted_seq='aaa';
%         skip_first_and_last=[1 1];  % non-skipped syllable is the STIMULATED/CATCH one, previous is the TRIGGERED one
%     targeted_seq='z';
    skip_first_and_last=[0 0];  % non-skipped syllable is the STIMULATED/CATCH one, previous is the TRIGGERED one
fid=fopen('batchfile','r');
fn=fgetl(fid);
id_name=strfind(fn,'_');birdname=fn(1:id_name-1);
fclose(fid);
syl=targeted_seq(1+skip_first_and_last(1));    
[f_cutoff,pq_offset,spect_params]=syllable_params_by_bird_LUKAS(birdname,syl);
pq_offset=pq_offset*1000;
pc_freqs=[f_cutoff(1)-250 f_cutoff(2)+250];
% if targeted_seq=='b'||targeted_seq=='a'||targeted_seq=='g'
% %     pc_freqs=[1400 3000];
% %     pc_freqs=[2000 4250];
%     pc_freqs=[2000 3000];
% elseif targeted_seq=='c'||targeted_seq=='d'
%     pc_freqs=[2000 4000];
% %     pc_freqs=[2500 4000];
% elseif targeted_seq=='e'||targeted_seq=='f'
%     pc_freqs=[1500 3500];
% elseif targeted_seq=='h'
%     pc_freqs=[1000 2500];
% end
clear f_cutoff spect_params

% if strcmp(targeted_seq,'ii')
%     pq_offset=20;            %milliseconds t_assay from syllable_params_by_bird_LUKAS
% elseif strcmp(targeted_seq,'cad')
% %     pq_offset=25;           %late quant
%     pq_offset=52;           %early quant
% elseif strcmp(targeted_seq,'aa')
%     pq_offset=8;           %early quant
% elseif strcmp(targeted_seq,'dd')
%     pq_offset=8;           %early quant
% elseif strcmp(targeted_seq,'ab')
%     pq_offset=24;           %early quant
% elseif strcmp(targeted_seq,'bc')
%     pq_offset=8;           %early quant
% end
% % pq_offset=0;

    fid=fopen('batchfile');
    ct=1;
    while 1
        fn=fgetl(fid);cbin_fn=fn(1:end-8);if (~ischar(fn));break;end
        load(fn);disp(fn);

        rec_array=readrecf([fn(1:(end-10)) 'rec']);  % array of file information loaded from .rec file
        rec_array=compute_stim_delay(fn,rec_array); % this function adds the field "stimtime" to rec_array
        triggered_syls_id=[];

        % Using ttimes loaded from .rec file, find the syllable with an
        % offset closest in time to the trigger - this code assumes that
        % that syllable is the one that generated the trigger
        for x=1:length(rec_array.ttimes)
%             tmp=find( abs(rec_array.ttimes(x)-offsets)==min(abs(rec_array.ttimes(x)-offsets))); % find offse closest to trigger
            tmp=find((rec_array.ttimes(x)-offsets)<0,1);
            if isempty(tmp) || onsets(tmp)>rec_array.ttimes(x)
                tmp=500;
            end
            triggered_syls_id=[triggered_syls_id tmp];
        end
        % Using .pbname (which is 'FB' for stim trials and 'catch' for catch
        % trials) break "triggered_syls_id" into "stimulated_syls_id" and
        % "catch_syls_id" depending on nature of trial
        stimulated_syls_id=triggered_syls_id(find(strcmp(rec_array.pbname,'FB')))+n_syls_from_trigger_to_stim_or_catch;
        catch_syls_id=triggered_syls_id(find(strcmp(rec_array.pbname,'catch')))+n_syls_from_trigger_to_stim_or_catch;

        % THIS IS NEW - ELIMINATES ALL EXAMPLES OF stimulated_syls_id WHERE
        % CONSECUTIVE SYLLABLES ARE STIMULATED
%         stimulated_syls_id=remove_consecutive_stims(stimulated_syls_id);
        stimulated_syls_id=remove_multiple_stims(stimulated_syls_id);
        
        %only want unique catch ids
        catch_syls_id=unique(catch_syls_id);
        
        % if a syllable was triggered twice or more, and one was catch,
        % then it should be treated as stim only
        catch_syls_id=setdiff(catch_syls_id,stimulated_syls_id);

        % Find all occurrences of the targeted sequence REGARDLESS of
        % whether there was a trigger
        true=[];true_tmp=[];
        for x=1:(length(labels)-length(targeted_seq)+1)
            compare=labels(x:(x+length(targeted_seq)-1));
            true_tmp(x)=strcmp(targeted_seq,compare);
%             if isempty(regexp(compare,regexptranslate('wildcard',targeted_seq),'once'));
%                 true_tmp(x)=0;
%             else
%                 true_tmp(x)=1;
%             end
        end
        
        true_tmp=find(true_tmp);

        if 1
            true=true_tmp;
        else
            % Now select only those with inter-syllable time separations below
            % a minimum value (this will weed out trials where there's a
            % silenced syl in the middle
            max_syl_separation=6000; % in msec
            ct_tmp=1;
            for x=1:length(true_tmp)
                vec_tmp=onsets(true_tmp(x):(true_tmp(x)+(length(targeted_seq))-1));
                if max(diff(vec_tmp))<max_syl_separation;
                    true(ct_tmp)=true_tmp(x);
                    ct_tmp=ct_tmp+1;
                end
            end
        end

        id_temp=true+skip_first_and_last(1);

        % Now find "id_stim" (syl #) of syllables that are both the targeted sequence AND
        % were triggered AND were a stimulation trial
        id_stim=intersect(id_temp,stimulated_syls_id); % both stimmed AND the targeted sequence
%         id_stim=intersect(id_stim,1:(length(labels)-skip_first_and_last(2)-1));  % skips examples at end of songs

        % Now find "id_catch" (syl #) ofsyllables that are both the targeted sequence AND
        % were triggered AND were a catch trial
        id_catch=intersect(id_temp,catch_syls_id);      % both catch AND the targeted sequence
%         id_catch=intersect(id_catch,1:(length(labels)-skip_first_and_last(2)-1));% skips examples at end of songs

        % Use "id_catch" and "id_stim" to load pitches and amplitudes,
        % which were previously calculated by headphones_analyze_pitch.m
        % and saved in the cbin.not.mat file
        for x=1:length(id_stim)
            fn_stim{end+1}=cbin_fn;
            t_stim(end+1)=onsets(id_stim(x))/1000;

%             pitch_stimmed_syl(end+1)=peak_pinterp_labelvec(id_stim(x));
            if pinterp==0
                pitch_stimmed_syl(end+1)=weighted_avg_labelvec(id_stim(x));
            else
                pitch_stimmed_syl(end+1)=peak_pinterp_labelvec(id_stim(x));
            end
            amp_stimmed_syl(end+1)=amp_at_pitchquant_labelvec(id_stim(x));
            amp_rms_stimmed_syl(end+1)=amp_rms_at_pitchquant_labelvec(id_stim(x));
            se_stimmed_syl(end+1)=spect_entropy_labelvec(id_stim(x));
            P1_allfreqs_stim(end+1,:)=P1_save_allfreqs_labelvec{id_stim(x)};
            P1_stim(end+1,:)=P1_save_labelvec{id_stim(x)};
            F1_allfreqs_stim(end+1,:)=F1_save_allfreqs_labelvec{id_stim(x)};
            F1_stim(end+1,:)=F1_save_labelvec{id_stim(x)};

            % delay from trigger to onset of stimulated syl
            temp=onsets(id_stim(x))-rec_array.ttimes;% positive values are onset after trig
            delay_from_trigger_to_onset_of_stim_syl(end+1)=max(temp(find(temp<0)));

            % delay from stim onset to onset of stimulated syl
            % The several if/else statements serve to prevent having
            % negative separations unless its the next closest one is 80 ms
            % away. You can change 80 to whatever you want in lines 181 and
            % 193. You can also change the constraint for negativity (for
            % instance, if a negative value is acceptable, as long as it is
            % not less than -20ms, change 0 to -20 in lines 181 and 193)
            temp=onsets(id_stim(x))-rec_array.stim_times;  % positive values are onset after trig
            temp_abs_sort=sort(abs(temp));
            if length(find(abs(temp)==temp_abs_sort(1)))>1
                tmpxx=temp(find(abs(temp)==temp_abs_sort(1)));
                if length(temp_abs_sort)>1
                    tmpxx2=temp(find(abs(temp)==temp_abs_sort(2)));
                    if tmpxx<-200 & tmpxx2<280
                        delay_from_stim_to_onset_of_stim_syl(end+1)=tmpxx2(1);
                    else
                        delay_from_stim_to_onset_of_stim_syl(end+1)=tmpxx(1);
                    end
                else
                    delay_from_stim_to_onset_of_stim_syl(end+1)=tmpxx(1);
                end
            else
                tmpxxx=temp(find(abs(temp)==temp_abs_sort(1)));
                if length(temp_abs_sort)>1
                    tmpxxx2=temp(find(abs(temp)==temp_abs_sort(2)));
                    if tmpxxx<-200 & tmpxxx2<280
                        delay_from_stim_to_onset_of_stim_syl(end+1)=tmpxxx2(1);
                    else
                        delay_from_stim_to_onset_of_stim_syl(end+1)=tmpxxx(1);
                    end
                else
                    delay_from_stim_to_onset_of_stim_syl(end+1)=tmpxxx(1);
                end          
            end
        end

        for x=1:length(id_catch)
            fn_catch{end+1}=cbin_fn;
%             pitch_catch_syl(end+1)=peak_pinterp_labelvec(id_catch(x));
            if pinterp==0
                pitch_catch_syl(end+1)=weighted_avg_labelvec(id_catch(x));
            else
                pitch_catch_syl(end+1)=peak_pinterp_labelvec(id_catch(x));
            end
            amp_catch_syl(end+1)=amp_at_pitchquant_labelvec(id_catch(x));
            amp_rms_catch_syl(end+1)=amp_rms_at_pitchquant_labelvec(id_catch(x));
            se_catch_syl(end+1)=spect_entropy_labelvec(id_catch(x));
            P1_allfreqs_catch(end+1,:)=P1_save_allfreqs_labelvec{id_catch(x)};
            P1_catch(end+1,:)=P1_save_labelvec{id_catch(x)};
            F1_allfreqs_catch(end+1,:)=F1_save_allfreqs_labelvec{id_catch(x)};
            F1_catch(end+1,:)=F1_save_labelvec{id_catch(x)};
        end

        % Talkback
        disp(['Found ' num2str(length(id_temp)) ' examples of ' targeted_seq ' skipping first ' (num2str(skip_first_and_last(1))) ' and last ' (num2str(skip_first_and_last(2)))])
        disp(['Of these, ' num2str(length(id_stim)) ' were stimulated'])
        disp(['Of these, ' num2str(length(id_catch)) ' were catch trials'])

        % If there were any stim or catch trials, load file's sound
        % waveform and (using evsoundin.m) and save the audio clips to the
        % arrays "stim_clips" and "catch_clips"
        if ~isempty(id_stim) | ~isempty(id_catch)
            [dat,fs]=evsoundin('',cbin_fn,'obs0');
            dat=bandpass_filtfilt(dat,fs,200,10000,'hanningfir');
            if ~isempty(id_stim)
                for x=1:length(id_stim)
                    z=z+1;
%                     clip_id_start=round(onsets(id_stim(x)-skip_first_and_last(1))-50)*fs/1000;%onset of trigger minus 50 ms
%                     clip_id_end=round(offsets(id_stim(x)+skip_first_and_last(2))+15)*fs/1000; % to offset of last + 15 msec
                    clip_id_start=round(onsets(id_stim(x))-160)*fs/1000;%onset of trigger minus 50 ms
                    clip_id_end=clip_id_start+320*fs/1000; % to offset of last + 15 msec
                    stim_clips{end+1}=dat(clip_id_start:clip_id_end);
                    pclip_id_start=round(onsets(id_stim(x))*fs/1000)-2560;
                    pclip_id_end=pclip_id_start+15360;
                    clip=zeros(15361,1);
                    temp_clip=dat(pclip_id_start:min(pclip_id_end,length(dat)));
                    clip(1:length(temp_clip))=temp_clip;
                    pstim_clips{end+1}=clip;
                    stim_clips_smoothed(z,:)=sliding_rms(dat(clip_id_start-0.008*fs:clip_id_end+0.008*fs));

                end
            end

            if ~isempty(id_catch)
                for x=1:length(id_catch)
                    p=p+1;
%                     clip_id_start=round(onsets(id_catch(x)-skip_first_and_last(1))-50)*fs/1000;%onset of trigger minus 50 ms
%                     clip_id_end=round(offsets(id_catch(x)+skip_first_and_last(2))+15)*fs/1000;% to offset of last + 15 msec
                    clip_id_start=round(onsets(id_catch(x))-160)*fs/1000;%onset of trigger minus 50 ms
                    clip_id_end=clip_id_start+320*fs/1000; % to offset of last + 15 msec
                    catch_clips{end+1}=dat(clip_id_start:clip_id_end);
                    pclip_id_start=round(onsets(id_catch(x))*fs/1000)-2560;
                    pclip_id_end=pclip_id_start+15360;
                    pcatch_clips{end+1}=dat(pclip_id_start:pclip_id_end);
                    catch_clips_smoothed(p,:)=sliding_rms(dat(clip_id_start-0.008*fs:clip_id_end+0.008*fs));
                end
            end
        end


    end
    %to calculate pitch contours
    [pitch_contours_stim,se_contours_stim,time_pc]=jc_pitchcontours_adapted_SE(pstim_clips,256,252,1,pc_freqs(1),pc_freqs(2),[1],'obs0');
    [pitch_contours_catch,se_contours_catch,time_pc]=jc_pitchcontours_adapted_SE(pcatch_clips,256,252,1,pc_freqs(1),pc_freqs(2),[1],'obs0');
    
    fclose(fid)
    savename=['TEMP_OUTPUT_SE_256_PC_' targeted_seq];
    save(savename,'catch_clips_smoothed','stim_clips_smoothed','time_pc','se_contours_stim','se_contours_catch','pitch_contours_stim','pitch_contours_catch','pstim_clips','pcatch_clips','pref','amp_rms_catch_syl','amp_rms_stimmed_syl','se_stimmed_syl','se_catch_syl','P1_allfreqs_stim','P1_allfreqs_catch','P1_stim','P1_catch',...
        'F1_allfreqs_stim','F1_allfreqs_catch','F1_stim','F1_catch','catch_clips','stim_clips','targeted_seq','skip_first_and_last','pitch_stimmed_syl',...
        'pitch_catch_syl','delay_from_trigger_to_onset_of_stim_syl','amp_catch_syl','amp_stimmed_syl','delay_from_stim_to_onset_of_stim_syl','fn_stim','t_stim','pq_offset');
    clear('tmp','catch_clips_smoothed','stim_clips_smoothed','time_pc','pitch_contours_stim','pitch_contours_catch','pstim_clips','pcatch_clips','pref','amp_rms_catch_syl','amp_rms_stimmed_syl','se_stimmed_syl','se_catch_syl','P1_allfreqs_stim','P1_allfreqs_catch','P1_stim','P1_catch',...
        'F1_allfreqs_stim','F1_allfreqs_catch','F1_stim','F1_catch','catch_clips','stim_clips','targeted_seq','skip_first_and_last','pitch_stimmed_syl',...
        'pitch_catch_syl','delay_from_trigger_to_onset_of_stim_syl','amp_catch_syl','amp_stimmed_syl','delay_from_stim_to_onset_of_stim_syl','fn_stim','t_stim','pq_offset');
    load(savename);
end

% Use this to select only a subset of data, based on the delay (in msec)
% from stim onset to syllable onset
if 1
%     id_delay2=fix((length(amp_stimmed_syl)/2)):1:length(amp_stimmed_syl);
%     id_delay2=1:1:40;
%     id_delay=find(delay_from_stim_to_onset_of_stim_syl>(-50-pq_offset) & delay_from_stim_to_onset_of_stim_syl<(50-pq_offset)); % specify delay in msec
    id_delay=find(delay_from_stim_to_onset_of_stim_syl<(0) & delay_from_stim_to_onset_of_stim_syl>(-35)); % specify delay in msec
%     id_delay=intersect(id_delay,id_delay2);
%     id_delay=id_delay(31:end);
    amp_stimmed_syl=amp_stimmed_syl(id_delay);
    amp_rms_stimmed_syl=amp_rms_stimmed_syl(id_delay);
    pitch_stimmed_syl=pitch_stimmed_syl(id_delay);
    stim_clips_smoothed=stim_clips_smoothed(id_delay,:);
    se_stimmed_syl=se_stimmed_syl(id_delay);
    P1_allfreqs_stim=P1_allfreqs_stim(id_delay,:);
    P1_stim=P1_stim(id_delay,:);
    F1_allfreqs_stim=F1_allfreqs_stim(id_delay,:);
    F1_stim=F1_stim(id_delay,:);
    t_stim=t_stim(id_delay);
    for x=1:length(id_delay)
        tmp{x}=stim_clips{id_delay(x)};
        tmp2(:,x)=pitch_contours_stim(:,id_delay(x));
        tmp3(:,x)=se_contours_stim(:,id_delay(x));
        tmp4{x}=fn_stim{id_delay(x)};
    end
    stim_clips=tmp;
    pitch_contours_stim=tmp2;
    se_contours_stim=tmp3;
    fn_stim=tmp4;
    delay_from_stim_to_onset_of_stim_syl=delay_from_stim_to_onset_of_stim_syl(id_delay);
end

if 1
    id_good_amp_catch=find(amp_catch_syl~=0);
    id_good_amp_stim=find(amp_stimmed_syl~=0);

%     id_good_amp_catch=id_good_amp_catch(50:end);
%     id_good_amp_stim=intersect(id_good_amp_stim,1:100);
    amp_stimmed_syl=amp_stimmed_syl(id_good_amp_stim);
    amp_rms_stimmed_syl=amp_rms_stimmed_syl(id_good_amp_stim);
    catch_clips_smoothed=catch_clips_smoothed(id_good_amp_catch,:);
    stim_clips_smoothed=stim_clips_smoothed(id_good_amp_stim,:);
    pitch_stimmed_syl=pitch_stimmed_syl(id_good_amp_stim);
    se_stimmed_syl=se_stimmed_syl(id_good_amp_stim);
    P1_allfreqs_stim=P1_allfreqs_stim(id_good_amp_stim,:);
    P1_stim=P1_stim(id_good_amp_stim,:);
    F1_allfreqs_stim=F1_allfreqs_stim(id_good_amp_stim,:);
    F1_stim=F1_stim(id_good_amp_stim,:);
    t_stim=t_stim(id_good_amp_stim);
    tmp=cell(0);
    tmp2=[];
    tmp3=[];
    tmp4=cell(0);
    for x=1:length(id_good_amp_stim)
        tmp{x}=stim_clips{id_good_amp_stim(x)};
        tmp2(:,x)=pitch_contours_stim(:,id_good_amp_stim(x));
        tmp3(:,x)=se_contours_stim(:,id_good_amp_stim(x));
        tmp4{x}=fn_stim{id_good_amp_stim(x)};
    end
    stim_clips=tmp;
    pitch_contours_stim=tmp2;
    se_contours_stim=tmp3;
    fn_stim=tmp4;
    delay_from_stim_to_onset_of_stim_syl=delay_from_stim_to_onset_of_stim_syl(id_good_amp_stim);
    
    amp_catch_syl=amp_catch_syl(id_good_amp_catch);
    amp_rms_catch_syl=amp_rms_catch_syl(id_good_amp_catch);
    pitch_catch_syl=pitch_catch_syl(id_good_amp_catch);
    se_catch_syl=se_catch_syl(id_good_amp_catch);
    P1_allfreqs_catch=P1_allfreqs_catch(id_good_amp_catch,:);
    P1_catch=P1_catch(id_good_amp_catch,:);
    F1_allfreqs_catch=F1_allfreqs_catch(id_good_amp_catch,:);
    F1_catch=F1_catch(id_good_amp_catch,:);
    tmp=cell(0);
    tmp2=[];
    tmp3=[];
    for x=1:length(id_good_amp_catch)
        tmp{x}=catch_clips{id_good_amp_catch(x)};
        tmp2(:,x)=pitch_contours_catch(:,id_good_amp_catch(x));
        tmp3(:,x)=se_contours_catch(:,id_good_amp_catch(x));
    end
    catch_clips=tmp;
    pitch_contours_catch=tmp2;
    se_contours_catch=tmp3;
end
if 1
    amp_catch_syl=amp_rms_catch_syl;
    amp_stimmed_syl=amp_rms_stimmed_syl;
end
disp('Converting amplitudes to log amplitudes')
amp_catch_syl=20*log10(amp_catch_syl/pref)+94;
amp_stimmed_syl=20*log10(amp_stimmed_syl/pref)+94;
mean(amp_catch_syl)
mean(amp_stimmed_syl)
mean(se_catch_syl)
mean(se_stimmed_syl)
figure
ax(1)=subplot(3,2,1);hold on
[P_catch,t_catch,f_catch]=display_mean_spect(catch_clips);
title(['Catch trials (trig on first syl shown), sequence is ' targeted_seq ' skipping first ' num2str(skip_first_and_last(1)) ' and last ' num2str(skip_first_and_last(2))])

ax(2)=subplot(3,2,2);hold on
[P_stim,t_stim,f_stim]=display_mean_spect(stim_clips);
title('Stim trials (trig on first syl shown)')

linkaxes(ax,'xy');

subplot(3,4,8);hold on
plot(pitch_catch_syl,'.'),plot(pitch_stimmed_syl,'r.')
title('Red is stim, blue is catch')

subplot(3,4,7);hold on
r=100*round(mean(pitch_catch_syl)/100);
l=r-1000;
u=r+1000;
bincenters=l:200:u;
n_catch=hist(pitch_catch_syl,bincenters);
n_stim=hist(pitch_stimmed_syl,bincenters);
plot(bincenters,n_catch/sum(n_catch))
plot(bincenters,n_stim/sum(n_stim),'r')
set(gca,'xlim',[min(bincenters) max(bincenters)])
[h,p]=ttest2(pitch_catch_syl,pitch_stimmed_syl);
title(['p=' num2str(p) ', 2-sided t-test'])
xlabel('Pitch (Hz)');ylabel('Norm. probability')

subplot(3,4,11);hold on
r=round(mean(amp_catch_syl));
l=r-2;
u=r+2;
bincenters=l:0.4:u;
n_catch=hist(amp_catch_syl,bincenters);
n_stim=hist(amp_stimmed_syl,bincenters);
plot(bincenters,n_catch/sum(n_catch))
plot(bincenters,n_stim/sum(n_stim),'r')
set(gca,'xlim',[min(bincenters) max(bincenters)])
[h,p]=ttest2(amp_catch_syl,amp_stimmed_syl);
title(['p=' num2str(p) ', 2-sided t-test'])
xlabel('Amp. (arb log units)');ylabel('Norm. probability')

subplot(3,4,12);hold on
plot(1,mean(pitch_catch_syl),'bo')
plot(2,mean(pitch_stimmed_syl),'ro')
% plot([1 1],[mean(pitch_catch_syl)-std(pitch_catch_syl) mean(pitch_catch_syl)+std(pitch_catch_syl)],'b')
% plot([2 2],[mean(pitch_stimmed_syl)-std(pitch_stimmed_syl) mean(pitch_stimmed_syl)+std(pitch_stimmed_syl)],'r')
plot([1 1],[mean(pitch_catch_syl)-std(pitch_catch_syl)/sqrt(length(pitch_catch_syl)) mean(pitch_catch_syl)+std(pitch_catch_syl)/sqrt(length(pitch_catch_syl))],'b','linew',4)
plot([2 2],[mean(pitch_stimmed_syl)-std(pitch_stimmed_syl)/sqrt(length(pitch_stimmed_syl)) mean(pitch_stimmed_syl)+std(pitch_stimmed_syl)/sqrt(length(pitch_stimmed_syl))],'r','linew',4)
clear tmp;tmp{1}='Catch';tmp{2}='Stim';set(gca,'xlim',[0 3],'xtick',1:2,'xticklabel',tmp)
title('Thin line is SD, thick line is SE')

% mean_pitch_catch=mean(pitch_catch_syl)
% mean_pitch_stim=mean(pitch_stimmed_syl)



subplot(3,2,3);hold on
plot(delay_from_stim_to_onset_of_stim_syl+pq_offset,pitch_stimmed_syl,'r.')
xlabel('Delay from stimulus onset to time of pitch quantification')
ylabel('Pitch of stimulated syllable')
title('Blue line = mean +/- 2 SDs pitch of catch trials')
xl=get(gca,'xlim');
plot(xl,mean(pitch_catch_syl)*[1 1],'b','linew',2)
plot(xl,(mean(pitch_catch_syl)+2*std(pitch_catch_syl))*[1 1],'b:','linew',1)
plot(xl,(mean(pitch_catch_syl)-2*std(pitch_catch_syl))*[1 1],'b:','linew',1)
hold on
if 0 % plot filenames
    for x=1:length(pitch_stimmed_syl)
        text(delay_from_stim_to_onset_of_stim_syl(x),pitch_stimmed_syl(x),[fn_stim{x}(end-12:end) ', t=' num2str(t_stim(x),3)],'fontsize',8,'color','r')
        hold on
    end
end
set(gca,'xdir','reverse')
if 0 %plot mean EMG from recording
    subplot(3,2,3);hold on
%     load mEMGaaa.mat %needs to be specific for the type of syllable, also needs to be in directory
    load mEMGcdd.mat %needs to be specific for the type of syllable, also needs to be in directory
    plot(-time+pq_offset,0.95*min(pitch_stimmed_syl)+mean_EMG*(range(pitch_stimmed_syl)*1.5)/range(mean_EMG),'g')
    title('Blue line = mean +/- 2 SDs pitch of catch trials, Green line = mean EMG recording trace')
end

subplot(3,2,5);hold on
plot(delay_from_stim_to_onset_of_stim_syl+pq_offset,amp_stimmed_syl,'r.')
xlabel('Delay from stimulus onset time of pitch quantification')
ylabel('amp of stimulated syllable')
title('Blue line = mean +/- 2 SDs amp of catch trials')
xl=get(gca,'xlim');
plot(xl,mean(amp_catch_syl)*[1 1],'b','linew',2)
plot(xl,(mean(amp_catch_syl)+2*std(amp_catch_syl))*[1 1],'b:','linew',1)
plot(xl,(mean(amp_catch_syl)-2*std(amp_catch_syl))*[1 1],'b:','linew',1)      
set(gca,'xdir','reverse')
if 0 % plot filenames
    for x=1:length(pitch_stimmed_syl)
        text(delay_from_stim_to_onset_of_stim_syl(x),amp_stimmed_syl(x),[fn_stim{x}(end-12:end) ', t=' num2str(t_stim(x),3)],'fontsize',8,'color','r')
        hold on
    end
end

if 0 %plot mean EMG from recording
    subplot(3,2,5);hold on
%     load mEMGaaa.mat %needs to be specific for the type of syllable, also needs to be in directory
    load mEMGcdd.mat %needs to be specific for the type of syllable, also needs to be in directory
    plot(-time+pq_offset,min(amp_stimmed_syl)*0.95+mean_EMG*(range(amp_stimmed_syl)*1.5)/range(mean_EMG),'g')
    title('Blue line = mean +/- 2 SDs amp of catch trials, Green line = mean EMG recording trace')
end
figure
plot(1,mean(amp_catch_syl),'bo')
hold on
plot(2,mean(amp_stimmed_syl),'ro')
% plot([1 1],[mean(amp_catch_syl)-std(amp_catch_syl) mean(amp_catch_syl)+std(amp_catch_syl)],'b')
% plot([2 2],[mean(amp_stimmed_syl)-std(amp_stimmed_syl) mean(amp_stimmed_syl)+std(amp_stimmed_syl)],'r')
plot([1 1],[mean(amp_catch_syl)-std(amp_catch_syl)/sqrt(length(amp_catch_syl)) mean(amp_catch_syl)+std(amp_catch_syl)/sqrt(length(amp_catch_syl))],'b','linew',4)
plot([2 2],[mean(amp_stimmed_syl)-std(amp_stimmed_syl)/sqrt(length(amp_stimmed_syl)) mean(amp_stimmed_syl)+std(amp_stimmed_syl)/sqrt(length(amp_stimmed_syl))],'r','linew',4)
clear tmp;tmp{1}='Catch';tmp{2}='Stim';set(gca,'xlim',[0 3],'xtick',1:2,'xticklabel',tmp)
title('Amplitude shift; Thick line is SE')

figure
subplot(1,2,1);hold on
r=round(mean(amp_catch_syl));
l=r-2;
u=r+2;
bincenters=l:0.4:u;
n_catch=hist(se_catch_syl,bincenters);
n_stim=hist(se_stimmed_syl,bincenters);
plot(bincenters,n_catch/sum(n_catch))
plot(bincenters,n_stim/sum(n_stim),'r')
set(gca,'xlim',[min(bincenters) max(bincenters)])
[h,p]=ttest2(se_catch_syl,se_stimmed_syl);
title(['p=' num2str(p) ', 2-sided t-test'])
xlabel('Spectral Entropy (arb units)');ylabel('Norm. probability')

subplot(1,2,2);hold on
plot(delay_from_stim_to_onset_of_stim_syl+pq_offset,se_stimmed_syl,'r.')
xlabel('Delay from stimulus onset time of pitch quantification')
ylabel('Spectral Entropy of stimulated syllable')
title('Blue line = mean +/- 2 SDs amp of catch trials')
xl=get(gca,'xlim');
plot(xl,mean(se_catch_syl)*[1 1],'b','linew',2)
plot(xl,(mean(se_catch_syl)+2*std(se_catch_syl))*[1 1],'b:','linew',1)
plot(xl,(mean(se_catch_syl)-2*std(se_catch_syl))*[1 1],'b:','linew',1)      
set(gca,'xdir','reverse')

figure
subplot(2,2,1);hold on
plot(mean(F1_allfreqs_catch),mean(log(P1_allfreqs_catch)),'b',mean(F1_allfreqs_stim),mean(log(P1_allfreqs_stim)),'r')
hold on
plot(mean(F1_allfreqs_catch),mean(log(P1_allfreqs_catch))+std(log(P1_allfreqs_catch))/size(P1_allfreqs_catch,1),'b--',mean(F1_allfreqs_catch),mean(log(P1_allfreqs_catch))-std(log(P1_allfreqs_catch))/size(P1_allfreqs_catch,1),'b--',...
    mean(F1_allfreqs_stim),mean(log(P1_allfreqs_stim))+std(log(P1_allfreqs_stim))/size(P1_allfreqs_stim,1),'r--',mean(F1_allfreqs_stim),mean(log(P1_allfreqs_stim))-std(log(P1_allfreqs_stim))/size(P1_allfreqs_stim,1),'r--')
xlabel('Frequency (Hz)')
ylabel('Power (Log Arb Units)')
title('Power Spectra for Catch (Blue) and Stim (Red)-All Freqs; dashed is SE')
subplot(2,2,3);hold on
plot(mean(F1_allfreqs_catch),mean(log(P1_allfreqs_stim))-mean(log(P1_allfreqs_catch)),'g')
xlabel('Frequency (Hz)')
ylabel('Power (Log Arb Units)')
title('Difference in Power Spectra-All Freqs')

subplot(2,2,2);hold on
plot(mean(F1_catch),mean(log(P1_catch)),'b',mean(F1_stim),mean(log(P1_stim)),'r')
hold on
plot(mean(F1_catch),mean(log(P1_catch))+std(log(P1_catch))/size(P1_catch,1),'b--',mean(F1_catch),mean(log(P1_catch))-std(log(P1_catch))/size(P1_catch,1),'b--',...
    mean(F1_stim),mean(log(P1_stim))+std(log(P1_stim))/size(P1_stim,1),'r--',mean(F1_stim),mean(log(P1_stim))-std(log(P1_stim))/size(P1_stim,1),'r--')
xlabel('Frequency (Hz)')
ylabel('Power (Log Arb Units)')
title('Power Spectra for Catch (Blue) and Stim (Red)-PQ Range; dashed is SE')
subplot(2,2,4);hold on
plot(mean(F1_catch),mean(log(P1_stim))-mean(log(P1_catch)),'g')
xlabel('Frequency (Hz)')
ylabel('Power (Log Arb Units)')
title('Difference in Power Spectra-PQ Range')



avna_diff=log(P_stim)-log(P_catch);
P_catch(find(P_catch<0.01))=0.01;
P_stim(find(P_stim<0.01))=0.01;
% avna_diff(find(abs(P_stim)<0.1))=0;

figure
ax(1)=subplot(1,3,1);hold on
% colormap('default')
a=jet;
colormap([zeros(15,3);a(15:end,:)]);
imagesc(t_catch-0.160,f_catch,log(P_catch));syn;
ylim([0,1e4]);
% xlim([-t_before_syl t_after_syl])
title('Catch')
freezeColors

ax(2)=subplot(1,3,2);hold on
% colormap('default')
a=jet;
colormap([zeros(15,3);a(15:end,:)]);
imagesc(t_stim-0.160,f_stim,log(P_stim));syn;ylim([0,1e4]);
title('Stim')
freezeColors


ax(3)=subplot(1,3,3);hold on
% load clim.mat
% imagesc(t_catch,f_catch,avna_diff,clim);
imagesc(t_catch-0.160,f_catch,avna_diff,max(max(abs([avna_diff])))*[-1 1]);
% clim=max(max(abs([avna_diff])))*[-1 1];
% save clim.mat clim
syn;ylim([0,1e4]);
%a=colormap;a(33,:)=ones(size(a(33,:)))*.6;colormap(a)
title('Stim-Catch')
linkaxes(ax,'xy')
make_diff_colormap
colorbar
set(gcf,'paperposition',[ 0.2500    6.2500    8.0000    2.2500])

%plot mean pitch contours
figure
mean_pc_catch=mean(pitch_contours_catch,2);
stderr_pc_catch=std(pitch_contours_catch,0,2)/sqrt(length(pitch_catch_syl));
mean_pc_stim=mean(pitch_contours_stim,2);
stderr_pc_stim=std(pitch_contours_stim,0,2)/sqrt(length(pitch_stimmed_syl));
fs=32000;
% time_pc=-4*(length(mean_pc_catch)-1)/(3*fs):4/fs:8*(length(mean_pc_catch)-1)/(3*fs);
% time_pc=linspace(-(length(pstim_clips{1})-1020)^2/(2*fs*4*length(mean_pc_catch)),(length(pstim_clips{1})-1020)^2/(2*fs*4*length(mean_pc_catch)),length(mean_pc_catch));
time_pc=time_pc-0.08;
% time_pc=linspace(-0.08,0.4,length(mean_pc_catch));

% mean_pc_catch=mean(pitch_contours_catch(floor(size(pitch_contours_catch,1))/2:floor(size(pitch_contours_catch,1))/2+150,:),2);
% size(pitch_contours_catch)
% std_pc_catch=std(pitch_contours_catch(floor(size(pitch_contours_catch,1))/2:floor(size(pitch_contours_catch,1))/2+150,:),0,2);
% mean_pc_stim=mean(pitch_contours_stim(floor(size(pitch_contours_stim,1))/2:floor(size(pitch_contours_stim,1))/2+150,:),2);
% std_pc_stim=std(pitch_contours_stim(floor(size(pitch_contours_stim,1))/2:floor(size(pitch_contours_stim,1))/2+150,:),0,2);
plot(time_pc,mean_pc_catch,'b-',time_pc,mean_pc_catch+stderr_pc_catch,'b--',time_pc,mean_pc_catch-stderr_pc_catch,'b--')
% plot(time_pc,pitch_contours_catch,'b-')
% plot(time_pc,mean_pc_catch,'b-')
hold on
% plot(time_pc,mean_pc_stim,'r-')
% plot(time_pc,pitch_contours_stim(floor(size(pitch_contours_stim,1))/2:floor(size(pitch_contours_stim,1))/2+150,:),'r-')
% plot(time_pc,mean_pc_stim,'r-')
% plot(time_pc,pitch_contours_stim,'r-')
plot(time_pc,mean_pc_stim,'r-',time_pc,mean_pc_stim+stderr_pc_stim,'r--',time_pc,mean_pc_stim-stderr_pc_stim,'r--')
yl=ylim;
stim_time=-1*mean(delay_from_stim_to_onset_of_stim_syl)/1000;
hqp_time=pq_offset/1000;
plot([stim_time stim_time],yl,'g-')
title('Pitch Contours During Stimulation (Red) vs. Catch (Blue +/- SE) Trials')
xlabel('Time Aligned to Syllable Onset (sec)')
ylabel('Pitch (Hz)')

yl=get(gca,'ylim');
plot(-1/1000*mean(delay_from_stim_to_onset_of_stim_syl),yl(1)+0.5*(yl(2)-yl(1)),'go')
% plot([-1/1000*(mean(delay_from_stim_to_onset_of_stim_syl)-std(delay_from_stim_to_onset_of_stim_syl)/sqrt(r)) -1/1000*(mean(delay_from_stim_to_onset_of_stim_syl)+std(delay_from_stim_to_onset_of_stim_syl)/sqrt(r))], [yl(1)+0.5*(yl(2)-yl(1)) yl(1)+0.5*(yl(2)-yl(1))],'g-')
plot([-1/1000*(mean(delay_from_stim_to_onset_of_stim_syl)-std(delay_from_stim_to_onset_of_stim_syl)) -1/1000*(mean(delay_from_stim_to_onset_of_stim_syl)+std(delay_from_stim_to_onset_of_stim_syl))], [yl(1)+0.5*(yl(2)-yl(1)) yl(1)+0.5*(yl(2)-yl(1))],'g-')

pre_time=fix(0.01/(time_pc(2)-time_pc(1))); %holds 10 ms before (in samples)
post_time=fix(0.1/(time_pc(2)-time_pc(1))); %holds 100ms after (in samples)
time_stim_effects=-0.01:(time_pc(2)-time_pc(1)):0.1;
figure
stim_effects=nan(size(pitch_contours_stim));
for k=1:size(pitch_contours_stim,2)
    [y,i]=min(abs(time_pc+delay_from_stim_to_onset_of_stim_syl(k)/1000));
    temp=pitch_contours_stim(i-pre_time:i+post_time,k)-mean_pc_catch(i-pre_time:i+post_time);
    stim_effects(1:length(temp),k)=temp;
end
mean_stim_effects=nanmean(stim_effects,2);
mean_stim_effects=mean_stim_effects(1:length(time_stim_effects));
stderr_stim_effects=nanstd(stim_effects,0,2)/sqrt(length(pitch_stimmed_syl));
stderr_stim_effects=stderr_stim_effects(1:length(time_stim_effects));
% plot(time_stim_effects,stim_effects(1:length(time_stim_effects),1:10))
plot(time_stim_effects,mean_stim_effects,'r-',time_stim_effects,mean_stim_effects+stderr_stim_effects,'r--',...
    time_stim_effects,mean_stim_effects-stderr_stim_effects,'r--',time_stim_effects,zeros(size(time_stim_effects)),'b-')
    
%plot mean SE contours
figure
mean_sec_catch=mean(se_contours_catch,2);
stderr_sec_catch=std(se_contours_catch,0,2)/sqrt(length(pitch_catch_syl));
mean_sec_stim=mean(se_contours_stim,2);
stderr_sec_stim=std(se_contours_stim,0,2)/sqrt(length(pitch_stimmed_syl));
% time_pc=-4*(length(mean_pc_catch)-1)/(3*fs):4/fs:8*(length(mean_pc_catch)-1)/(3*fs);
% time_pc=linspace(-(length(pstim_clips{1})-1020)^2/(2*fs*4*length(mean_pc_catch)),(length(pstim_clips{1})-1020)^2/(2*fs*4*length(mean_pc_catch)),length(mean_pc_catch));
% time_pc=time_pc+0.02;
time_pc=linspace(-0.08,0.4,length(mean_pc_catch));

% mean_pc_catch=mean(pitch_contours_catch(floor(size(pitch_contours_catch,1))/2:floor(size(pitch_contours_catch,1))/2+150,:),2);
% size(pitch_contours_catch)
% std_pc_catch=std(pitch_contours_catch(floor(size(pitch_contours_catch,1))/2:floor(size(pitch_contours_catch,1))/2+150,:),0,2);
% mean_pc_stim=mean(pitch_contours_stim(floor(size(pitch_contours_stim,1))/2:floor(size(pitch_contours_stim,1))/2+150,:),2);
% std_pc_stim=std(pitch_contours_stim(floor(size(pitch_contours_stim,1))/2:floor(size(pitch_contours_stim,1))/2+150,:),0,2);
plot(time_pc,mean_sec_catch,'b-',time_pc,mean_sec_catch+stderr_sec_catch,'b--',time_pc,mean_sec_catch-stderr_sec_catch,'b--')
% plot(time_pc,pitch_contours_catch,'b-')
% plot(time_pc,mean_pc_catch,'b-')
hold on
% plot(time_pc,mean_pc_stim,'r-')
% plot(time_pc,pitch_contours_stim(floor(size(pitch_contours_stim,1))/2:floor(size(pitch_contours_stim,1))/2+150,:),'r-')
% plot(time_pc,mean_pc_stim,'r-')
% plot(time_pc,pitch_contours_stim,'r.')
plot(time_pc,mean_sec_stim,'r-',time_pc,mean_sec_stim+stderr_sec_stim,'r--',time_pc,mean_sec_stim-stderr_sec_stim,'r--')
yl=ylim;
stim_time=-1*mean(delay_from_stim_to_onset_of_stim_syl)/1000;
hqp_time=pq_offset/1000;
plot([stim_time stim_time],yl,'g-')
title('SE Contours During Stimulation (Red) vs. Catch (Blue +/- SE) Trials')
xlabel('Time Aligned to Syllable Onset (sec)')
ylabel('SE (arb units)')

yl=get(gca,'ylim');
plot(-1/1000*mean(delay_from_stim_to_onset_of_stim_syl),yl(1)+0.5*(yl(2)-yl(1)),'go')
% plot([-1/1000*(mean(delay_from_stim_to_onset_of_stim_syl)-std(delay_from_stim_to_onset_of_stim_syl)/sqrt(r)) -1/1000*(mean(delay_from_stim_to_onset_of_stim_syl)+std(delay_from_stim_to_onset_of_stim_syl)/sqrt(r))], [yl(1)+0.5*(yl(2)-yl(1)) yl(1)+0.5*(yl(2)-yl(1))],'g-')
plot([-1/1000*(mean(delay_from_stim_to_onset_of_stim_syl)-std(delay_from_stim_to_onset_of_stim_syl)) -1/1000*(mean(delay_from_stim_to_onset_of_stim_syl)+std(delay_from_stim_to_onset_of_stim_syl))], [yl(1)+0.5*(yl(2)-yl(1)) yl(1)+0.5*(yl(2)-yl(1))],'g-')

figure
% fs=32;
stim_clips_smoothed=20*log10(stim_clips_smoothed./pref)+94;
catch_clips_smoothed=20*log10(catch_clips_smoothed./pref)+94;
[r,c]=size(stim_clips_smoothed);
[r1,c1]=size(catch_clips_smoothed);
time=-0.168:1/fs:0.168;
plot(time,mean(stim_clips_smoothed,1),'r',time,mean(catch_clips_smoothed,1),'b')
hold on
yl=ylim;
plot([stim_time stim_time],yl,'g-')

plot(time,mean(stim_clips_smoothed,1)+std(stim_clips_smoothed,0,1)/sqrt(r),'r--',time,mean(stim_clips_smoothed,1)-std(stim_clips_smoothed,0,1)/sqrt(r),'r--')
plot(time,mean(catch_clips_smoothed,1)+std(catch_clips_smoothed,0,1)/sqrt(r1),'b--',time,mean(catch_clips_smoothed,1)-std(catch_clips_smoothed,0,1)/sqrt(r1),'b--')
% plot(time,max(catch_clips_smoothed,1),'b--',time,min(catch_clips_smoothed,1),'b--')
% plot(time,max(stim_clips_smoothed,1),'b--',time,min(stim_clips_smoothed,1),'b--')
xlabel('Time relative to syllable onset (ms)')
ylabel('Smooth Rectified Amplitude (dB)')
% axis([-160 75 min(mean(stim_clips_smoothed(:,fix(end/2)),1))-.2 max(mean(stim_clips_smoothed,1))+.2])
yl=get(gca,'ylim');
plot(-1/1000*mean(delay_from_stim_to_onset_of_stim_syl),yl(1)+0.5*(yl(2)-yl(1)),'go')
% plot([-1/1000*(mean(delay_from_stim_to_onset_of_stim_syl)-std(delay_from_stim_to_onset_of_stim_syl)/sqrt(r)) -1/1000*(mean(delay_from_stim_to_onset_of_stim_syl)+std(delay_from_stim_to_onset_of_stim_syl)/sqrt(r))], [yl(1)+0.5*(yl(2)-yl(1)) yl(1)+0.5*(yl(2)-yl(1))],'g-')
plot([-1/1000*(mean(delay_from_stim_to_onset_of_stim_syl)-std(delay_from_stim_to_onset_of_stim_syl)) -1/1000*(mean(delay_from_stim_to_onset_of_stim_syl)+std(delay_from_stim_to_onset_of_stim_syl))], [yl(1)+0.5*(yl(2)-yl(1)) yl(1)+0.5*(yl(2)-yl(1))],'g-')
title('RMS Amplitude During Stimulation (Red) vs. Catch (Blue +/- SE) Trials')

figure
ax(1)=subplot(1,3,1);hold on
% colormap('default')
a=jet;
colormap([zeros(15,3);a(15:end,:)]);
imagesc(t_catch-0.160,f_catch,log(P_catch));syn;
ylim([0,1e4]);
% xlim([-t_before_syl t_after_syl])
hold on
plot(time_pc,mean_pc_catch,'b','LineWidth',5)
title('Catch')
freezeColors

ax(2)=subplot(1,3,2);hold on
% colormap('default')
a=jet;
colormap([zeros(15,3);a(15:end,:)]);
imagesc(t_stim-0.160,f_stim,log(P_stim));syn;ylim([0,1e4]);
plot(time_pc,mean_pc_stim,'b','LineWidth',5)
title('Stim')
freezeColors


ax(3)=subplot(1,3,3);hold on
% load clim.mat
% imagesc(t_catch,f_catch,avna_diff,clim);
imagesc(t_catch-0.160,f_catch,avna_diff,max(max(abs([avna_diff])))*[-1 1]);
% clim=max(max(abs([avna_diff])))*[-1 1];
% save clim.mat clim
syn;ylim([0,1e4]);
hold on
plot(time_pc,mean_pc_stim,'r','LineWidth',5)
plot(time_pc,mean_pc_catch,'b','LineWidth',5)
%a=colormap;a(33,:)=ones(size(a(33,:)))*.6;colormap(a)
title('Stim-Catch')
linkaxes(ax,'xy')
make_diff_colormap
colorbar
set(gcf,'paperposition',[ 0.2500    6.2500    8.0000    2.2500])



function make_diff_colormap

a=jet;
hot_part=a(1:22,:);
for x=1:3
    new_hot_part(:,x)=interp(hot_part(:,x),1);
end

cool_part=a(43:64,:);
for x=1:3
    new_cool_part(:,x)=interp(cool_part(:,x),1);
end
a_new=abs([flipud(new_hot_part);zeros(20,3);flipud(new_cool_part)]);
%    a_new=abs([flipud(new_hot_part);flipud(new_cool_part)]);
%a_new=abs([new_hot_part;new_cool_part]);
%a_new=abs([new_hot_part;ones(10,3)*.4;new_cool_part]);
a_new=a_new/max(max(a_new));
colormap(a_new)


function [power,time,freq]=display_mean_spect(clip_array)

if length(clip_array)==1
    [S1{1},F1{1},T1{1},P1_mean]=spect_from_waveform(clip_array{1},32000,0,[0.5 8]);x=1;max_T_length_vec=1;
else
    max_T_vec=[];
    max_T_length_vec=[];

    for x=1:length(clip_array)
        [S1{x},F1{x},T1{x},P1{x}]=spect_from_waveform(clip_array{x},32000,0,[0.5 8]);
        max_T_vec(end+1)=max(T1{x});
        max_T_length_vec(end+1)=max(length(T1{x}));
    end

    if 0 % align time at start of clip
        P1_mean=P1{1}(:,1:min(max_T_length_vec));

        for x=2:length(clip_array)
            P1_mean=P1_mean+P1{x}(:,1:min(max_T_length_vec));
        end
    else % align time at end of clip
        P1_mean=P1{1}(:,[length(T1{1})-min(max_T_length_vec)+1]:end);
        for x=2:length(clip_array)
            P1_mean=P1_mean+P1{x}(:,[length(T1{x})-min(max_T_length_vec)+1]:end);
        end
    end
    P1_mean=P1_mean/length(clip_array);
end
f=F1{x};Pxx=P1_mean;
id=f<10000 & f>500;
f=f(id);Pxx=Pxx(id,:);

id=Pxx<.01;
Pxx(id)=.01;
power=Pxx;
time=T1{x}(1:min(max_T_length_vec));
freq=f;
imagesc(T1{x}(1:min(max_T_length_vec)),f,log(Pxx));set(gca,'YD','n');
set(gca,'xlim',[T1{x}(1) T1{x}(min(max_T_length_vec))],'ylim',[500 10000])



function [catch_clips,stim_clips,pitch_stimmed_syl,pitch_catch_syl,amp_catch_syl,amp_stimmed_syl,delay_from_stim_to_onset_of_stim_syl,targeted_seq,skip_first_and_last,t_stim,fn_stim]=combine_datasets(load_arr);

catch_clips_tmp={};
stim_clips_tmp={};
pitch_stimmed_syl_tmp=[];
pitch_catch_syl_tmp=[];
amp_catch_syl_tmp=[];
amp_stimmed_syl_tmp=[];
delay_from_stim_to_onset_of_stim_syl_tmp=[];
t_stim_tmp=[];fn_stim_tmp={};

for x=1:length(load_arr)
    load(load_arr{x});
    catch_clips_tmp=cat(2,catch_clips_tmp,catch_clips);
    stim_clips_tmp=cat(2,stim_clips_tmp,stim_clips);
    pitch_stimmed_syl_tmp=[pitch_stimmed_syl_tmp pitch_stimmed_syl];
    pitch_catch_syl_tmp=[pitch_catch_syl_tmp pitch_catch_syl];
    amp_catch_syl_tmp=[amp_catch_syl_tmp amp_catch_syl];
    amp_stimmed_syl_tmp=[amp_stimmed_syl_tmp amp_stimmed_syl];
    delay_from_stim_to_onset_of_stim_syl_tmp=[delay_from_stim_to_onset_of_stim_syl_tmp delay_from_stim_to_onset_of_stim_syl];
    t_stim_tmp=[t_stim_tmp t_stim];
    fn_stim_tmp=cat(2,fn_stim_tmp,fn_stim);
end
catch_clips=catch_clips_tmp;
stim_clips=stim_clips_tmp;
pitch_stimmed_syl=pitch_stimmed_syl_tmp;
pitch_catch_syl=pitch_catch_syl_tmp;
amp_catch_syl=amp_catch_syl_tmp;
amp_stimmed_syl=amp_stimmed_syl_tmp;
delay_from_stim_to_onset_of_stim_syl=delay_from_stim_to_onset_of_stim_syl_tmp;
t_stim=t_stim_tmp;
fn_stim=fn_stim_tmp;

function rec_array=compute_stim_delay(fn,rec_array)

[trig,fs]=evsoundin('',fn(1:end-8),'obs1');
id_stim=find(rec_array.catch==0);
id_catch=find(rec_array.catch);
for j=1:length(id_stim)
    t=1;
    while t<fs*30/100
        try
            if floor(rec_array.ttimes(id_stim(j))*fs/1000+t)==length(trig)
                rec_array.stim_times(id_stim(j))=500+rec_array.ttimes(id_stim(j));
                t=t+0.2*fs;  %get out of while statement if it finds a stimulation
                disp(['No stim because at end of file'])            
            elseif trig(floor(rec_array.ttimes(id_stim(j))*fs/1000+t))>mean(trig(floor(rec_array.ttimes(id_stim(j))*fs/1000+t-(3/100*fs)):floor(rec_array.ttimes(id_stim(j))*fs/1000+t-1)))+500*std(trig(floor(rec_array.ttimes(id_stim(j))*fs/1000+t-(3/100*fs)):floor(rec_array.ttimes(id_stim(j))*fs/1000+t-1))) %I had to use floor in the beginning because it was giving me trouble with non-integer indeices (even though it was an integer)
                stim_lat=t/fs*1000;   %convert to ms, as rec_array.ttimes is also in ms
                %rec_array.latency_from_trigger_to_stim(id_stim(j))=stim_lat;
                rec_array.stim_times(id_stim(j))=stim_lat+rec_array.ttimes(id_stim(j));
                t=t+0.2*fs;  %get out of while statement if it finds a stimulation
                disp(['Computed latency from trigger to stim = ' num2str(stim_lat)])
            else
                t=t+1;
            end
        catch
            rec_array.stim_times(id_stim(j))=500+rec_array.ttimes(id_stim(j));
            t=t+0.2*fs;  %get out of while statement if it finds a stimulation
        end
    end
end



% THIS IS NEW - ELIMINATES ALL EXAMPLES OF stimulated_syls_id WHERE
% CONSECUTIVE SYLLABLES ARE STIMULATED
function stimulated_syls_id=remove_consecutive_stims(stimulated_syls_id)
xx=length(stimulated_syls_id);
if length(stimulated_syls_id)>1
    temp=[];
    if stimulated_syls_id(1)~=(stimulated_syls_id(2)-1);
        temp(end+1)=stimulated_syls_id(1);
    end
    for x=2:(length(stimulated_syls_id)-1)
        if stimulated_syls_id(x+1)~=(stimulated_syls_id(x)+1) & stimulated_syls_id(x-1)~=(stimulated_syls_id(x)-1)
            temp(end+1)=stimulated_syls_id(x);
        end
    end
    if stimulated_syls_id(end)~=(stimulated_syls_id(end-1)+1);
        temp(end+1)=stimulated_syls_id(end);
    end
    stimulated_syls_id=temp;
end
if length(stimulated_syls_id)<xx
    disp(['Removed ' num2str(xx-length(stimulated_syls_id)) ' for being consecutive stims'])
end


% THIS IS NEW - ELIMINATES ALL EXAMPLES OF stimulated_syls_id WHERE
% stimulated syllable is stimmed more than once
function stimulated_syls_id=remove_multiple_stims(stimulated_syls_id)
xx=length(stimulated_syls_id);
if length(stimulated_syls_id)>1
    temp=[];
    uni_ids=unique(stimulated_syls_id);
    for p=1:length(uni_ids)
        if length(find(stimulated_syls_id==uni_ids(p)))==1
            temp(end+1)=uni_ids(p);
        end
    end
    stimulated_syls_id=temp;
end
if length(stimulated_syls_id)<xx
    disp(['Removed ' num2str(xx-length(stimulated_syls_id)) ' for being multiple stims'])
end
